// <auto-generated />
using System;
using MenuDigital.Infrastructure.Persistence.MySQLContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MenuDigital.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251004195910_orderList")]
    partial class orderList
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MenuDigital.Domain.Entities.AddressModel", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("StoreModelStoreId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("neighborhood")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AddressId");

                    b.HasIndex("StoreModelStoreId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("ProductModelProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("StoreModelStoreId")
                        .HasColumnType("char(36)");

                    b.HasKey("CategoryId");

                    b.HasIndex("ProductModelProductId");

                    b.HasIndex("StoreModelStoreId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.MenuModels.CombinedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<bool>("MainMenu")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProductModelProductId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Size")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductModelProductId");

                    b.ToTable("CombinedProducts");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.MenuModels.MenuModel", b =>
                {
                    b.Property<Guid>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductIds")
                        .HasColumnType("longtext");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("char(36)");

                    b.HasKey("MenuId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.OrderList", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("DeliveryForm")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("FinishedAt")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("OrderedAt")
                        .HasColumnType("time(6)");

                    b.Property<int>("PaymentForm")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StoreId")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("OrderId");

                    b.ToTable("OrderList");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.ProductModel", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("CombinedPrice")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ExtraIndex")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("IsSale")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Multiple")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.StoreModel", b =>
                {
                    b.Property<Guid>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Alert")
                        .HasColumnType("longtext");

                    b.Property<bool>("Closed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("HasImage")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<double?>("MinOrderPrice")
                        .HasColumnType("double");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StoreUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StoreId");

                    b.ToTable("StoreModels");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.StorePayments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("PaymentsCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoreModelStoreId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StoreModelStoreId");

                    b.ToTable("StorePayments");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.WorkSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("End")
                        .HasColumnType("time(6)");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("Start")
                        .HasColumnType("time(6)");

                    b.Property<Guid?>("StoreModelStoreId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StoreModelStoreId");

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("MenuDigital.Domain.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.AddressModel", b =>
                {
                    b.HasOne("MenuDigital.Domain.Entities.StoreModel", null)
                        .WithMany("Address")
                        .HasForeignKey("StoreModelStoreId");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.Category", b =>
                {
                    b.HasOne("MenuDigital.Domain.Entities.ProductModel", null)
                        .WithMany("Category")
                        .HasForeignKey("ProductModelProductId");

                    b.HasOne("MenuDigital.Domain.Entities.StoreModel", null)
                        .WithMany("Category")
                        .HasForeignKey("StoreModelStoreId");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.MenuModels.CombinedProduct", b =>
                {
                    b.HasOne("MenuDigital.Domain.Entities.ProductModel", null)
                        .WithMany("CombinedProducts")
                        .HasForeignKey("ProductModelProductId");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.ProductModel", b =>
                {
                    b.OwnsMany("MenuDigital.Domain.Entities.PreviewPrice", "PreviewPrices", b1 =>
                        {
                            b1.Property<Guid>("ProductModelProductId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Label")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(65,30)");

                            b1.HasKey("ProductModelProductId", "Id");

                            b1.ToTable("PreviewPrice");

                            b1.WithOwner()
                                .HasForeignKey("ProductModelProductId");
                        });

                    b.OwnsMany("MenuDigital.Domain.Entities.Price", "Prices", b1 =>
                        {
                            b1.Property<Guid>("ProductModelProductId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Label")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(65,30)");

                            b1.HasKey("ProductModelProductId", "Id");

                            b1.ToTable("Price");

                            b1.WithOwner()
                                .HasForeignKey("ProductModelProductId");
                        });

                    b.Navigation("PreviewPrices");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.StoreModel", b =>
                {
                    b.OwnsOne("MenuDigital.Domain.Entities.Contact", "Contacts", b1 =>
                        {
                            b1.Property<Guid>("StoreModelStoreId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Emails")
                                .HasColumnType("longtext");

                            b1.Property<string>("Phones")
                                .HasColumnType("longtext");

                            b1.Property<string>("Whatsapps")
                                .HasColumnType("longtext");

                            b1.HasKey("StoreModelStoreId");

                            b1.ToTable("StoreModels");

                            b1.WithOwner()
                                .HasForeignKey("StoreModelStoreId");
                        });

                    b.OwnsOne("MenuDigital.Domain.Entities.Images", "Images", b1 =>
                        {
                            b1.Property<Guid>("StoreModelStoreId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Header")
                                .HasMaxLength(500)
                                .HasColumnType("varchar(500)");

                            b1.Property<string>("Logo")
                                .HasMaxLength(500)
                                .HasColumnType("varchar(500)");

                            b1.HasKey("StoreModelStoreId");

                            b1.ToTable("StoreModels");

                            b1.WithOwner()
                                .HasForeignKey("StoreModelStoreId");
                        });

                    b.OwnsOne("MenuDigital.Domain.Entities.SocialMedia", "SocialMedias", b1 =>
                        {
                            b1.Property<Guid>("StoreModelStoreId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Facebook")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Instagram")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Website")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Whatsapp")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("X")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("StoreModelStoreId");

                            b1.ToTable("StoreModels");

                            b1.WithOwner()
                                .HasForeignKey("StoreModelStoreId");
                        });

                    b.OwnsOne("MenuDigital.Domain.Entities.ValuesObjects.Colors", "Colors", b1 =>
                        {
                            b1.Property<Guid>("StoreModelStoreId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Primary")
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)");

                            b1.Property<string>("Secondary")
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)");

                            b1.HasKey("StoreModelStoreId");

                            b1.ToTable("StoreModels");

                            b1.WithOwner()
                                .HasForeignKey("StoreModelStoreId");
                        });

                    b.Navigation("Colors");

                    b.Navigation("Contacts");

                    b.Navigation("Images");

                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.StorePayments", b =>
                {
                    b.HasOne("MenuDigital.Domain.Entities.StoreModel", null)
                        .WithMany("StorePayments")
                        .HasForeignKey("StoreModelStoreId");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.WorkSchedule", b =>
                {
                    b.HasOne("MenuDigital.Domain.Entities.StoreModel", null)
                        .WithMany("WorkSchedule")
                        .HasForeignKey("StoreModelStoreId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MenuDigital.Domain.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MenuDigital.Domain.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuDigital.Domain.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MenuDigital.Domain.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.ProductModel", b =>
                {
                    b.Navigation("Category");

                    b.Navigation("CombinedProducts");
                });

            modelBuilder.Entity("MenuDigital.Domain.Entities.StoreModel", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Category");

                    b.Navigation("StorePayments");

                    b.Navigation("WorkSchedule");
                });
#pragma warning restore 612, 618
        }
    }
}
